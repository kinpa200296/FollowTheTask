@using FollowTheTask.Web.Infrastructure
@using Microsoft.AspNet.Identity
@model FollowTheTask.BLL.Services.Issue.ViewModels.IssueInfoViewModel

@{
    ViewBag.Title = "Edit issue";
}

<h2>Edit issue</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)
        @Html.HiddenFor(model => model.AssigneeId)
        @Html.HiddenFor(model => model.Assignee)
        @Html.HiddenFor(model => model.AssigneeName)
        @Html.HiddenFor(model => model.ReporterId)
        @Html.HiddenFor(model => model.Reporter)
        @Html.HiddenFor(model => model.ReporterName)
        @Html.HiddenFor(model => model.CreatedDateUtc)
        @Html.HiddenFor(model => model.Feature)
        @Html.HiddenFor(model => model.FeatureId)

        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Version, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Version, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Version, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TypeId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DictionarySelect(StaticValues.Instance.IssueTypes, "TypeId")
                @Html.ValidationMessageFor(model => model.TypeId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PriorityId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DictionarySelect(StaticValues.Instance.Priorities, "PriorityId")
                @Html.ValidationMessageFor(model => model.PriorityId, "", new { @class = "text-danger" })
            </div>
        </div>
        
        @if (PermissionResolver.IssueEditNoRepPermission(int.Parse(User.Identity.GetUserId()), Model.Id))
        {
            <div class="form-group">
                @Html.LabelFor(model => model.StatusId, htmlAttributes: new {@class = "control-label col-md-2"})
                <div class="col-md-10">
                    @Html.DictionarySelect(StaticValues.Instance.Statuses, "StatusId")
                    @Html.ValidationMessageFor(model => model.StatusId, "", new {@class = "text-danger"})
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ResolutionId, htmlAttributes: new {@class = "control-label col-md-2"})
                <div class="col-md-10">
                    @Html.DictionarySelect(StaticValues.Instance.Resolutions, "ResolutionId")
                    @Html.ValidationMessageFor(model => model.ResolutionId, "", new {@class = "text-danger"})
                </div>
            </div>
        }
        else
        {
            @Html.HiddenFor(model => model.StatusId)
            @Html.HiddenFor(model => model.ResolutionId)
        }
        
        @*@if (PermissionResolver.IssueEditNoAssigneePermission(int.Parse(User.Identity.GetUserId()), Model.Id))
        {
            <div class="form-group">
                @Html.LabelFor(model => model.DeadlineDateUtc, htmlAttributes: new {@class = "control-label col-md-2"})
                <div class="col-md-10">
                    @Html.EditorFor(model => model.DeadlineDateUtc, new {htmlAttributes = new {@class = "form-control"}})
                    @Html.ValidationMessageFor(model => model.DeadlineDateUtc, "", new {@class = "text-danger"})
                </div>
            </div>
        }
        else
        {
            @Html.HiddenFor(model => model.DeadlineDateUtc)
        }*@


        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-primary" />
                @Html.ActionLink("Back to Issue", "Index", new { id = Model.Id }, new {@class = "btn btn-default"})
            </div>
        </div>
    </div>
}